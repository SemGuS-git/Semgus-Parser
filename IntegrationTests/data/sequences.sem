(declare-term-types
 ((Start 0))
 ((($main))))

(declare-const X (Seq Int))

(define-funs-rec
    ((Start.Sem ((Start_term_0 Start) (rq (Seq Int)) (x (_ BitVec 32))) Bool))

    ((match Start_term_0
            ((($main)
              (exists ((rb (Seq String)) (ra (Seq String)))
                      (and (= "Test" (seq.nth rb 7))
                           (= rb (seq.++ ra (seq.unit "a")))
                           (= rb (as seq.empty (Seq String)))
                           (= rq (seq.rev rq))
                           (= (seq.len ra) (seq.nth rq 1))
                           (= (seq.update ra 7 rb) rb)
                           (= ra (seq.extract rb 3 5))
                           (= (seq.at rb 4) (seq.at ra 3))
                           (seq.contains ra rb)
                           (= 12 (seq.indexof ra rb 7))
                           (= ra (seq.replace ra ra rb))
                           (= (seq.replace_all ra ra rb) rb)
                           (seq.prefixof ra rb)
                           (seq.suffixof rb ra))))))))


(synth-fun MyFunc () Start)


(constraint (exists ((rq (Seq Int)) (y (_ BitVec 32))) (Start.Sem MyFunc rq y)))

(check-synth)
