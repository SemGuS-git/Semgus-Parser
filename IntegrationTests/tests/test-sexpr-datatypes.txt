 
(declare-function (identifier "name1") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String")))) 
(define-function (identifier "name1") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String"))) :definition (term (lambda :arguments (list) :body "Maria"))) 
(declare-function (identifier "name2") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String")))) 
(define-function (identifier "name2") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String"))) :definition (term (lambda :arguments (list) :body "Kaoruko"))) 
(declare-function (identifier "name3") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String")))) 
(define-function (identifier "name3") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String"))) :definition (term (lambda :arguments (list) :body "Sena"))) 
(declare-function (identifier "name4") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String")))) 
(define-function (identifier "name4") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String"))) :definition (term (lambda :arguments (list) :body "Etna"))) 
(declare-function (identifier "name5") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String")))) 
(define-function (identifier "name5") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String"))) :definition (term (lambda :arguments (list) :body "Bill"))) 
(declare-function (identifier "name6") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String")))) 
(define-function (identifier "name6") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String"))) :definition (term (lambda :arguments (list) :body "Ted"))) 
(declare-function (identifier "name7") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String")))) 
(define-function (identifier "name7") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String"))) :definition (term (lambda :arguments (list) :body "Frank"))) 
(declare-function (identifier "name8") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String")))) 
(define-function (identifier "name8") :rank (rank :argument-sorts (list) :return-sort (sort (identifier "String"))) :definition (term (lambda :arguments (list) :body "Boris"))) 
(declare-term-types (sort (identifier "PairTT")) (sort (identifier "NameTT"))) 
(add-constructor (sort (identifier "PairTT")) :operator (identifier "$pair") :children (list (sort (identifier "PairTT")) (sort (identifier "PairTT")))) 
(add-constructor (sort (identifier "PairTT")) :operator (identifier "$leaf") :children (list (sort (identifier "NameTT")))) 
(add-constructor (sort (identifier "NameTT")) :operator (identifier "$name1") :children (list)) 
(add-constructor (sort (identifier "NameTT")) :operator (identifier "$name2") :children (list)) 
(add-constructor (sort (identifier "NameTT")) :operator (identifier "$name3") :children (list)) 
(add-constructor (sort (identifier "NameTT")) :operator (identifier "$name4") :children (list)) 
(add-constructor (sort (identifier "NameTT")) :operator (identifier "$name5") :children (list)) 
(add-constructor (sort (identifier "NameTT")) :operator (identifier "$name6") :children (list)) 
(add-constructor (sort (identifier "NameTT")) :operator (identifier "$name7") :children (list)) 
(add-constructor (sort (identifier "NameTT")) :operator (identifier "$name8") :children (list)) 
(declare-datatype (sort (identifier "Pair")) :arity 0) 
(add-datatype-constructor :datatype (sort (identifier "Pair")) :name (identifier "pair") :children (list (sort (identifier "Pair")) (sort (identifier "Pair")))) 
(add-datatype-constructor :datatype (sort (identifier "Pair")) :name (identifier "leaf") :children (list (sort (identifier "String")))) 
(declare-function (identifier "Pair.Sem") :rank (rank :argument-sorts (list (sort (identifier "PairTT")) (sort (identifier "Pair"))) :return-sort (sort (identifier "Bool")))) 
(declare-function (identifier "Name.Sem") :rank (rank :argument-sorts (list (sort (identifier "NameTT")) (sort (identifier "String"))) :return-sort (sort (identifier "Bool")))) 
(define-function (identifier "Pair.Sem") :rank (rank :argument-sorts (list (sort (identifier "PairTT")) (sort (identifier "Pair"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "term") (identifier "output")) :body (match :term (variable (identifier "term") :sort (sort (identifier "PairTT"))) :binders (list (binder :operator (identifier "$pair") :arguments (list (identifier "p1") (identifier "p2")) :child (exists :bindings (list (identifier "o1") (identifier "o2")) :binding-sorts (list (sort (identifier "Pair")) (sort (identifier "Pair"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "Pair.Sem") :argument-sorts (list (sort (identifier "PairTT")) (sort (identifier "Pair"))) :arguments (list (variable (identifier "p1") :sort (sort (identifier "PairTT"))) (variable (identifier "o1") :sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Bool"))) (application (identifier "Pair.Sem") :argument-sorts (list (sort (identifier "PairTT")) (sort (identifier "Pair"))) :arguments (list (variable (identifier "p2") :sort (sort (identifier "PairTT"))) (variable (identifier "o2") :sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Pair")) (sort (identifier "Pair"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "Pair"))) (application (identifier "pair") :argument-sorts (list (sort (identifier "Pair")) (sort (identifier "Pair"))) :arguments (list (variable (identifier "o1") :sort (sort (identifier "Pair"))) (variable (identifier "o2") :sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool"))))) (binder :operator (identifier "$leaf") :arguments (list (identifier "n1")) :child (exists :bindings (list (identifier "o1")) :binding-sorts (list (sort (identifier "String"))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "Name.Sem") :argument-sorts (list (sort (identifier "NameTT")) (sort (identifier "String"))) :arguments (list (variable (identifier "n1") :sort (sort (identifier "NameTT"))) (variable (identifier "o1") :sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Pair")) (sort (identifier "Pair"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "Pair"))) (application (identifier "leaf") :argument-sorts (list (sort (identifier "String"))) :arguments (list (variable (identifier "o1") :sort (sort (identifier "String")))) :return-sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(define-function (identifier "Name.Sem") :rank (rank :argument-sorts (list (sort (identifier "NameTT")) (sort (identifier "String"))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "term") (identifier "output")) :body (match :term (variable (identifier "term") :sort (sort (identifier "NameTT"))) :binders (list (binder :operator (identifier "$name1") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name1") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$name2") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name2") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$name3") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name3") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$name4") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name4") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$name5") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name5") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$name6") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name6") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$name7") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name7") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) (binder :operator (identifier "$name8") :arguments (list) :child (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name8") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool"))))))))) 
(declare-function (identifier "leaf-pair") :rank (rank :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :return-sort (sort (identifier "Pair")))) 
(define-function (identifier "leaf-pair") :rank (rank :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :return-sort (sort (identifier "Pair"))) :definition (term (lambda :arguments (list (identifier "s1") (identifier "s2")) :body (application (identifier "pair") :argument-sorts (list (sort (identifier "Pair")) (sort (identifier "Pair"))) :arguments (list (application (identifier "leaf") :argument-sorts (list (sort (identifier "String"))) :arguments (list (variable (identifier "s1") :sort (sort (identifier "String")))) :return-sort (sort (identifier "Pair"))) (application (identifier "leaf") :argument-sorts (list (sort (identifier "String"))) :arguments (list (variable (identifier "s2") :sort (sort (identifier "String")))) :return-sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Pair")))))) 
(chc :head (relation (identifier "Pair.Sem") :signature (list (sort (identifier "PairTT")) (sort (identifier "Pair"))) :arguments (list (identifier "term") (identifier "output"))) :body (list (relation (identifier "Pair.Sem") :signature (list (sort (identifier "PairTT")) (sort (identifier "Pair"))) :arguments (list (identifier "p1") (identifier "o1"))) (relation (identifier "Pair.Sem") :signature (list (sort (identifier "PairTT")) (sort (identifier "Pair"))) :arguments (list (identifier "p2") (identifier "o2")))) :output-variables (list (identifier "output")) :variables (list (identifier "term") (identifier "output") (identifier "o1") (identifier "o2")) :symbols (symbol-table :term (symbol-entry (identifier "term") :sort (sort (identifier "PairTT")) :index 0) :outputs (list (symbol-entry (identifier "output") :sort (sort (identifier "Pair")) :index 1)) :auxiliary (list (symbol-entry (identifier "o1") :sort (sort (identifier "Pair"))) (symbol-entry (identifier "o2") :sort (sort (identifier "Pair")))) :children (list (symbol-entry (identifier "p1") :sort (sort (identifier "PairTT")) :index 0) (symbol-entry (identifier "p2") :sort (sort (identifier "PairTT")) :index 1))) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Pair")) (sort (identifier "Pair"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "Pair"))) (application (identifier "pair") :argument-sorts (list (sort (identifier "Pair")) (sort (identifier "Pair"))) :arguments (list (variable (identifier "o1") :sort (sort (identifier "Pair"))) (variable (identifier "o2") :sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$pair") :arguments (list (identifier "p1") (identifier "p2")) :argument-sorts (list (sort (identifier "PairTT")) (sort (identifier "PairTT"))) :return-sort (sort (identifier "PairTT")))) 
(chc :head (relation (identifier "Pair.Sem") :signature (list (sort (identifier "PairTT")) (sort (identifier "Pair"))) :arguments (list (identifier "term") (identifier "output"))) :body (list (relation (identifier "Name.Sem") :signature (list (sort (identifier "NameTT")) (sort (identifier "String"))) :arguments (list (identifier "n1") (identifier "o1")))) :output-variables (list (identifier "output")) :variables (list (identifier "term") (identifier "output") (identifier "o1")) :symbols (symbol-table :term (symbol-entry (identifier "term") :sort (sort (identifier "PairTT")) :index 0) :outputs (list (symbol-entry (identifier "output") :sort (sort (identifier "Pair")) :index 1)) :auxiliary (list (symbol-entry (identifier "o1") :sort (sort (identifier "String")))) :children (list (symbol-entry (identifier "n1") :sort (sort (identifier "NameTT")) :index 0))) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "Pair")) (sort (identifier "Pair"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "Pair"))) (application (identifier "leaf") :argument-sorts (list (sort (identifier "String"))) :arguments (list (variable (identifier "o1") :sort (sort (identifier "String")))) :return-sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$leaf") :arguments (list (identifier "n1")) :argument-sorts (list (sort (identifier "NameTT"))) :return-sort (sort (identifier "PairTT")))) 
(chc :head (relation (identifier "Name.Sem") :signature (list (sort (identifier "NameTT")) (sort (identifier "String"))) :arguments (list (identifier "term") (identifier "output"))) :body (list) :output-variables (list (identifier "output")) :variables (list (identifier "term") (identifier "output")) :symbols (symbol-table :term (symbol-entry (identifier "term") :sort (sort (identifier "NameTT")) :index 0) :outputs (list (symbol-entry (identifier "output") :sort (sort (identifier "String")) :index 1)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name1") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$name1") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "NameTT")))) 
(chc :head (relation (identifier "Name.Sem") :signature (list (sort (identifier "NameTT")) (sort (identifier "String"))) :arguments (list (identifier "term") (identifier "output"))) :body (list) :output-variables (list (identifier "output")) :variables (list (identifier "term") (identifier "output")) :symbols (symbol-table :term (symbol-entry (identifier "term") :sort (sort (identifier "NameTT")) :index 0) :outputs (list (symbol-entry (identifier "output") :sort (sort (identifier "String")) :index 1)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name2") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$name2") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "NameTT")))) 
(chc :head (relation (identifier "Name.Sem") :signature (list (sort (identifier "NameTT")) (sort (identifier "String"))) :arguments (list (identifier "term") (identifier "output"))) :body (list) :output-variables (list (identifier "output")) :variables (list (identifier "term") (identifier "output")) :symbols (symbol-table :term (symbol-entry (identifier "term") :sort (sort (identifier "NameTT")) :index 0) :outputs (list (symbol-entry (identifier "output") :sort (sort (identifier "String")) :index 1)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name3") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$name3") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "NameTT")))) 
(chc :head (relation (identifier "Name.Sem") :signature (list (sort (identifier "NameTT")) (sort (identifier "String"))) :arguments (list (identifier "term") (identifier "output"))) :body (list) :output-variables (list (identifier "output")) :variables (list (identifier "term") (identifier "output")) :symbols (symbol-table :term (symbol-entry (identifier "term") :sort (sort (identifier "NameTT")) :index 0) :outputs (list (symbol-entry (identifier "output") :sort (sort (identifier "String")) :index 1)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name4") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$name4") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "NameTT")))) 
(chc :head (relation (identifier "Name.Sem") :signature (list (sort (identifier "NameTT")) (sort (identifier "String"))) :arguments (list (identifier "term") (identifier "output"))) :body (list) :output-variables (list (identifier "output")) :variables (list (identifier "term") (identifier "output")) :symbols (symbol-table :term (symbol-entry (identifier "term") :sort (sort (identifier "NameTT")) :index 0) :outputs (list (symbol-entry (identifier "output") :sort (sort (identifier "String")) :index 1)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name5") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$name5") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "NameTT")))) 
(chc :head (relation (identifier "Name.Sem") :signature (list (sort (identifier "NameTT")) (sort (identifier "String"))) :arguments (list (identifier "term") (identifier "output"))) :body (list) :output-variables (list (identifier "output")) :variables (list (identifier "term") (identifier "output")) :symbols (symbol-table :term (symbol-entry (identifier "term") :sort (sort (identifier "NameTT")) :index 0) :outputs (list (symbol-entry (identifier "output") :sort (sort (identifier "String")) :index 1)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name6") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$name6") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "NameTT")))) 
(chc :head (relation (identifier "Name.Sem") :signature (list (sort (identifier "NameTT")) (sort (identifier "String"))) :arguments (list (identifier "term") (identifier "output"))) :body (list) :output-variables (list (identifier "output")) :variables (list (identifier "term") (identifier "output")) :symbols (symbol-table :term (symbol-entry (identifier "term") :sort (sort (identifier "NameTT")) :index 0) :outputs (list (symbol-entry (identifier "output") :sort (sort (identifier "String")) :index 1)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name7") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$name7") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "NameTT")))) 
(chc :head (relation (identifier "Name.Sem") :signature (list (sort (identifier "NameTT")) (sort (identifier "String"))) :arguments (list (identifier "term") (identifier "output"))) :body (list) :output-variables (list (identifier "output")) :variables (list (identifier "term") (identifier "output")) :symbols (symbol-table :term (symbol-entry (identifier "term") :sort (sort (identifier "NameTT")) :index 0) :outputs (list (symbol-entry (identifier "output") :sort (sort (identifier "String")) :index 1)) :auxiliary (list) :children (list)) :constraint (term (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (variable (identifier "output") :sort (sort (identifier "String"))) (application (identifier "name8") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$name8") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "NameTT")))) 
(synth-fun (identifier "make-tree") :term-type (sort (identifier "PairTT")) :grammar (grammar :non-terminals (list (identifier "@PairTT__agtt") (identifier "@NameTT__agtt")) :non-terminal-types (list (sort (identifier "PairTT")) (sort (identifier "NameTT"))) :productions (list (production :instance (identifier "@PairTT__agtt") :occurrences (list (identifier "@PairTT__agtt") (identifier "@PairTT__agtt")) :operator (identifier "$pair")) (production :instance (identifier "@PairTT__agtt") :occurrences (list (identifier "@NameTT__agtt")) :operator (identifier "$leaf")) (production :instance (identifier "@NameTT__agtt") :occurrences (list) :operator (identifier "$name1")) (production :instance (identifier "@NameTT__agtt") :occurrences (list) :operator (identifier "$name2")) (production :instance (identifier "@NameTT__agtt") :occurrences (list) :operator (identifier "$name3")) (production :instance (identifier "@NameTT__agtt") :occurrences (list) :operator (identifier "$name4")) (production :instance (identifier "@NameTT__agtt") :occurrences (list) :operator (identifier "$name5")) (production :instance (identifier "@NameTT__agtt") :occurrences (list) :operator (identifier "$name6")) (production :instance (identifier "@NameTT__agtt") :occurrences (list) :operator (identifier "$name7")) (production :instance (identifier "@NameTT__agtt") :occurrences (list) :operator (identifier "$name8"))))) 
(constraint (term (application (identifier "Pair.Sem") :argument-sorts (list (sort (identifier "PairTT")) (sort (identifier "Pair"))) :arguments (list (application (identifier "make-tree") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "PairTT"))) (application (identifier "pair") :argument-sorts (list (sort (identifier "Pair")) (sort (identifier "Pair"))) :arguments (list (application (identifier "pair") :argument-sorts (list (sort (identifier "Pair")) (sort (identifier "Pair"))) :arguments (list (application (identifier "leaf-pair") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (application (identifier "name1") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String"))) (application (identifier "name8") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Pair"))) (application (identifier "leaf") :argument-sorts (list (sort (identifier "String"))) :arguments (list (application (identifier "name7") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Pair"))) (application (identifier "leaf-pair") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list (application (identifier "name3") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String"))) (application (identifier "name4") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Pair")))) :return-sort (sort (identifier "Bool"))))) 
(check-synth)