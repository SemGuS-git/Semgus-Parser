declare-term-types: 
  (_ _SyTT Start 1) --> _SyProd((_ _SyTT ntString 2));
  (_ _SyTT ntString 2) --> _SyProd() | _SyProd() | _SyProd() | _SyProd() | _SyProd((_ _SyTT ntString 2), (_ _SyTT ntString 2)) | _SyProd((_ _SyTT ntString 2), (_ _SyTT ntInt 3)) | _SyProd((_ _SyTT ntInt 3)) | _SyProd((_ _SyTT ntString 2), (_ _SyTT ntInt 3), (_ _SyTT ntInt 3));
  (_ _SyTT ntInt 3) --> _SyProd() | _SyProd() | _SyProd() | _SyProd((_ _SyTT ntInt 3), (_ _SyTT ntInt 3)) | _SyProd((_ _SyTT ntInt 3), (_ _SyTT ntInt 3)) | _SyProd((_ _SyTT ntString 2)) | _SyProd((_ _SyTT ntString 2)) | _SyProd((_ _SyTT ntString 2), (_ _SyTT ntString 2), (_ _SyTT ntInt 3));
  (_ _SyTT ntBool 4) --> _SyProd() | _SyProd();
check-synth
CHC: ((_ _SySem Start 7) (_ _SyTerm t 5) name (_ _SyOut o 6)) <= ((_ _SySem ntString 10) (_ _SyTerm t 8) name (_ _SyOut o 6)) ^ true
    [constructor: ((_ _SyProd StartTontString 17) (_ _SyTerm t 8))]     [inputs: name]     [outputs: (_ _SyOut o 6)]
CHC: ((_ _SySem ntString 10) (_ _SyTerm t 8) name (_ _SyOut o 9)) <= (= (_ _SyOut o 9) name)
    [constructor: ((_ _SyProd name 19))]     [inputs: name]     [outputs: (_ _SyOut o 9)]
CHC: ((_ _SySem ntString 10) (_ _SyTerm t 8) name (_ _SyOut o 9)) <= (= (_ _SyOut o 9) " ")
    [constructor: ((_ _SyProd " " 21))]     [inputs: name]     [outputs: (_ _SyOut o 9)]
CHC: ((_ _SySem ntString 10) (_ _SyTerm t 8) name (_ _SyOut o 9)) <= (= (_ _SyOut o 9) ".")
    [constructor: ((_ _SyProd "." 23))]     [inputs: name]     [outputs: (_ _SyOut o 9)]
CHC: ((_ _SySem ntString 10) (_ _SyTerm t 8) name (_ _SyOut o 9)) <= (= (_ _SyOut o 9) "Dr.")
    [constructor: ((_ _SyProd "Dr." 25))]     [inputs: name]     [outputs: (_ _SyOut o 9)]
CHC: ((_ _SySem ntString 10) (_ _SyTerm t 8) name (_ _SyOut o 9)) <= ((_ _SySem ntString 10) (_ _SyTerm 1 27) name (_ _SyOut 1 28)) ^ ((_ _SySem ntString 10) (_ _SyTerm 2 29) name (_ _SyOut 2 30)) ^ (= (_ _SyOut o 9) (str.++ (_ _SyOut 1 28) (_ _SyOut 2 30)))
    [constructor: ((_ _SyProd str.++ 31) (_ _SyTerm 1 27) (_ _SyTerm 2 29))]     [inputs: name]     [outputs: (_ _SyOut o 9)]
CHC: ((_ _SySem ntString 10) (_ _SyTerm t 8) name (_ _SyOut o 9)) <= ((_ _SySem ntString 10) (_ _SyTerm 1 33) name (_ _SyOut 1 34)) ^ ((_ _SySem ntInt 13) (_ _SyTerm 2 35) name (_ _SyOut 2 36)) ^ (= (_ _SyOut o 9) (str.at (_ _SyOut 1 34) (_ _SyOut 2 36)))
    [constructor: ((_ _SyProd str.at 37) (_ _SyTerm 1 33) (_ _SyTerm 2 35))]     [inputs: name]     [outputs: (_ _SyOut o 9)]
CHC: ((_ _SySem ntString 10) (_ _SyTerm t 8) name (_ _SyOut o 9)) <= ((_ _SySem ntInt 13) (_ _SyTerm 1 39) name (_ _SyOut 1 40)) ^ (= (_ _SyOut o 9) (str.from_int (_ _SyOut 1 40)))
    [constructor: ((_ _SyProd str.from_int 41) (_ _SyTerm 1 39))]     [inputs: name]     [outputs: (_ _SyOut o 9)]
CHC: ((_ _SySem ntString 10) (_ _SyTerm t 8) name (_ _SyOut o 9)) <= ((_ _SySem ntString 10) (_ _SyTerm 1 43) name (_ _SyOut 1 44)) ^ ((_ _SySem ntInt 13) (_ _SyTerm 2 45) name (_ _SyOut 2 46)) ^ ((_ _SySem ntInt 13) (_ _SyTerm 3 47) name (_ _SyOut 3 48)) ^ (= (_ _SyOut o 9) (str.substr (_ _SyOut 1 44) (_ _SyOut 2 46) (_ _SyOut 3 48)))
    [constructor: ((_ _SyProd str.substr 49) (_ _SyTerm 1 43) (_ _SyTerm 2 45) (_ _SyTerm 3 47))]     [inputs: name]     [outputs: (_ _SyOut o 9)]
CHC: ((_ _SySem ntInt 13) (_ _SyTerm t 11) name (_ _SyOut o 12)) <= (= (_ _SyOut o 12) 0)
    [constructor: ((_ _SyProd 0 51))]     [inputs: name]     [outputs: (_ _SyOut o 12)]
CHC: ((_ _SySem ntInt 13) (_ _SyTerm t 11) name (_ _SyOut o 12)) <= (= (_ _SyOut o 12) 1)
    [constructor: ((_ _SyProd 1 53))]     [inputs: name]     [outputs: (_ _SyOut o 12)]
CHC: ((_ _SySem ntInt 13) (_ _SyTerm t 11) name (_ _SyOut o 12)) <= (= (_ _SyOut o 12) 2)
    [constructor: ((_ _SyProd 2 55))]     [inputs: name]     [outputs: (_ _SyOut o 12)]
CHC: ((_ _SySem ntInt 13) (_ _SyTerm t 11) name (_ _SyOut o 12)) <= ((_ _SySem ntInt 13) (_ _SyTerm 1 57) name (_ _SyOut 1 58)) ^ ((_ _SySem ntInt 13) (_ _SyTerm 2 59) name (_ _SyOut 2 60)) ^ (= (_ _SyOut o 12) (+ (_ _SyOut 1 58) (_ _SyOut 2 60)))
    [constructor: ((_ _SyProd + 61) (_ _SyTerm 1 57) (_ _SyTerm 2 59))]     [inputs: name]     [outputs: (_ _SyOut o 12)]
CHC: ((_ _SySem ntInt 13) (_ _SyTerm t 11) name (_ _SyOut o 12)) <= ((_ _SySem ntInt 13) (_ _SyTerm 1 63) name (_ _SyOut 1 64)) ^ ((_ _SySem ntInt 13) (_ _SyTerm 2 65) name (_ _SyOut 2 66)) ^ (= (_ _SyOut o 12) (- (_ _SyOut 1 64) (_ _SyOut 2 66)))
    [constructor: ((_ _SyProd - 67) (_ _SyTerm 1 63) (_ _SyTerm 2 65))]     [inputs: name]     [outputs: (_ _SyOut o 12)]
CHC: ((_ _SySem ntInt 13) (_ _SyTerm t 11) name (_ _SyOut o 12)) <= ((_ _SySem ntString 10) (_ _SyTerm 1 69) name (_ _SyOut 1 70)) ^ (= (_ _SyOut o 12) (str.len (_ _SyOut 1 70)))
    [constructor: ((_ _SyProd str.len 71) (_ _SyTerm 1 69))]     [inputs: name]     [outputs: (_ _SyOut o 12)]
CHC: ((_ _SySem ntInt 13) (_ _SyTerm t 11) name (_ _SyOut o 12)) <= ((_ _SySem ntString 10) (_ _SyTerm 1 73) name (_ _SyOut 1 74)) ^ (= (_ _SyOut o 12) (str.to_int (_ _SyOut 1 74)))
    [constructor: ((_ _SyProd str.to_int 75) (_ _SyTerm 1 73))]     [inputs: name]     [outputs: (_ _SyOut o 12)]
CHC: ((_ _SySem ntInt 13) (_ _SyTerm t 11) name (_ _SyOut o 12)) <= ((_ _SySem ntString 10) (_ _SyTerm 1 77) name (_ _SyOut 1 78)) ^ ((_ _SySem ntString 10) (_ _SyTerm 2 79) name (_ _SyOut 2 80)) ^ ((_ _SySem ntInt 13) (_ _SyTerm 3 81) name (_ _SyOut 3 82)) ^ (= (_ _SyOut o 12) (str.indexof (_ _SyOut 1 78) (_ _SyOut 2 80) (_ _SyOut 3 82)))
    [constructor: ((_ _SyProd str.indexof 83) (_ _SyTerm 1 77) (_ _SyTerm 2 79) (_ _SyTerm 3 81))]     [inputs: name]     [outputs: (_ _SyOut o 12)]
CHC: ((_ _SySem ntBool 16) (_ _SyTerm t 14) name (_ _SyOut o 15)) <= (= (_ _SyOut o 15) true)
    [constructor: ((_ _SyProd true 85))]     [inputs: name]     [outputs: (_ _SyOut o 15)]
CHC: ((_ _SySem ntBool 16) (_ _SyTerm t 14) name (_ _SyOut o 15)) <= (= (_ _SyOut o 15) false)
    [constructor: ((_ _SyProd false 87))]     [inputs: name]     [outputs: (_ _SyOut o 15)]
Constraint: (exists (((_ _SyOut o 90) String)) (and ((_ _SySem Start 7) (_ _SyTerm f 89) "Nancy" (_ _SyOut o 90)) (= (_ _SyOut o 90) "Dr. Nancy")))
Constraint: (exists (((_ _SyOut o 91) String)) (and ((_ _SySem Start 7) (_ _SyTerm f 89) "Andrew" (_ _SyOut o 91)) (= (_ _SyOut o 91) "Dr. Andrew")))
Constraint: (exists (((_ _SyOut o 92) String)) (and ((_ _SySem Start 7) (_ _SyTerm f 89) "Jan" (_ _SyOut o 92)) (= (_ _SyOut o 92) "Dr. Jan")))
Constraint: (exists (((_ _SyOut o 93) String)) (and ((_ _SySem Start 7) (_ _SyTerm f 89) "Mariya" (_ _SyOut o 93)) (= (_ _SyOut o 93) "Dr. Mariya")))
Function to Synthesize: (_ _SyTerm f 89)
Grammar: Start [(_ _SyTT Start 1)] ntString [(_ _SyTT ntString 2)] ntInt [(_ _SyTT ntInt 3)] ntBool [(_ _SyTT ntBool 4)]
Start --> ((_ _SyProd StartTontString 17) ntString)
ntString --> (_ _SyProd name 19)
ntString --> (_ _SyProd " " 21)
ntString --> (_ _SyProd "." 23)
ntString --> (_ _SyProd "Dr." 25)
ntString --> ((_ _SyProd str.++ 31) ntString ntString)
ntString --> ((_ _SyProd str.at 37) ntString ntInt)
ntString --> ((_ _SyProd str.from_int 41) ntInt)
ntString --> ((_ _SyProd str.substr 49) ntString ntInt ntInt)
ntInt --> (_ _SyProd 0 51)
ntInt --> (_ _SyProd 1 53)
ntInt --> (_ _SyProd 2 55)
ntInt --> ((_ _SyProd + 61) ntInt ntInt)
ntInt --> ((_ _SyProd - 67) ntInt ntInt)
ntInt --> ((_ _SyProd str.len 71) ntString)
ntInt --> ((_ _SyProd str.to_int 75) ntString)
ntInt --> ((_ _SyProd str.indexof 83) ntString ntString ntInt)
ntBool --> (_ _SyProd true 85)
ntBool --> (_ _SyProd false 87)
