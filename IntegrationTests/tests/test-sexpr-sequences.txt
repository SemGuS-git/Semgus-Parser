 
(declare-term-types (sort (identifier "Start"))) 
(add-constructor (sort (identifier "Start")) :operator (identifier "$main") :children (list)) 
(declare-function (identifier "Start.Sem") :rank (rank :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Seq") (sort (identifier "Int"))) (sort (identifier "BitVec" 32))) :return-sort (sort (identifier "Bool")))) 
(define-function (identifier "Start.Sem") :rank (rank :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Seq") (sort (identifier "Int"))) (sort (identifier "BitVec" 32))) :return-sort (sort (identifier "Bool"))) :definition (term (lambda :arguments (list (identifier "Start_term_0") (identifier "rq") (identifier "x")) :body (match :term (variable (identifier "Start_term_0") :sort (sort (identifier "Start"))) :binders (list (binder :operator (identifier "$main") :arguments (list) :child (exists :bindings (list (identifier "rb") (identifier "ra")) :binding-sorts (list (sort (identifier "Seq") (sort (identifier "String"))) (sort (identifier "Seq") (sort (identifier "String")))) :child (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list "Test" (application (identifier "seq.nth") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "String"))) (sort (identifier "Int"))) :arguments (list (variable (identifier "rb") :sort (sort (identifier "Seq") (sort (identifier "String")))) 7) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "String"))) (sort (identifier "Seq") (sort (identifier "String")))) :arguments (list (variable (identifier "rb") :sort (sort (identifier "Seq") (sort (identifier "String")))) (application (identifier "seq.++") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "String"))) (sort (identifier "Seq") (sort (identifier "String")))) :arguments (list (variable (identifier "ra") :sort (sort (identifier "Seq") (sort (identifier "String")))) (application (identifier "seq.unit") :argument-sorts (list (sort (identifier "String"))) :arguments (list "a") :return-sort (sort (identifier "Seq") (sort (identifier "String"))))) :return-sort (sort (identifier "Seq") (sort (identifier "String"))))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "String"))) (sort (identifier "Seq") (sort (identifier "String")))) :arguments (list (variable (identifier "rb") :sort (sort (identifier "Seq") (sort (identifier "String")))) (application (identifier "seq.empty") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Seq") (sort (identifier "String"))))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "Int"))) (sort (identifier "Seq") (sort (identifier "Int")))) :arguments (list (variable (identifier "rq") :sort (sort (identifier "Seq") (sort (identifier "Int")))) (application (identifier "seq.rev") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "Int")))) :arguments (list (variable (identifier "rq") :sort (sort (identifier "Seq") (sort (identifier "Int"))))) :return-sort (sort (identifier "Seq") (sort (identifier "Int"))))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))))))))) 
(chc :id (identifier "_CHC-$main-1") :head (relation (identifier "Start.Sem") :signature (list (sort (identifier "Start")) (sort (identifier "Seq") (sort (identifier "Int"))) (sort (identifier "BitVec" 32))) :arguments (list (identifier "Start_term_0") (identifier "rq") (identifier "x"))) :body (list) :variables (list (identifier "Start_term_0") (identifier "rq") (identifier "x") (identifier "rb") (identifier "ra")) :symbols (symbol-table :term (symbol-entry (identifier "Start_term_0") :sort (sort (identifier "Start")) :index 0) :inputs (list) :outputs (list) :auxiliary (list (symbol-entry (identifier "rb") :sort (sort (identifier "Seq") (sort (identifier "String")))) (symbol-entry (identifier "ra") :sort (sort (identifier "Seq") (sort (identifier "String"))))) :children (list) :unclassified (list (symbol-entry (identifier "rq") :sort (sort (identifier "Seq") (sort (identifier "Int"))) :index 1) (symbol-entry (identifier "x") :sort (sort (identifier "BitVec" 32)) :index 2))) :constraint (term (application (identifier "and") :argument-sorts (list (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool")) (sort (identifier "Bool"))) :arguments (list (application (identifier "=") :argument-sorts (list (sort (identifier "String")) (sort (identifier "String"))) :arguments (list "Test" (application (identifier "seq.nth") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "String"))) (sort (identifier "Int"))) :arguments (list (variable (identifier "rb") :sort (sort (identifier "Seq") (sort (identifier "String")))) 7) :return-sort (sort (identifier "String")))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "String"))) (sort (identifier "Seq") (sort (identifier "String")))) :arguments (list (variable (identifier "rb") :sort (sort (identifier "Seq") (sort (identifier "String")))) (application (identifier "seq.++") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "String"))) (sort (identifier "Seq") (sort (identifier "String")))) :arguments (list (variable (identifier "ra") :sort (sort (identifier "Seq") (sort (identifier "String")))) (application (identifier "seq.unit") :argument-sorts (list (sort (identifier "String"))) :arguments (list "a") :return-sort (sort (identifier "Seq") (sort (identifier "String"))))) :return-sort (sort (identifier "Seq") (sort (identifier "String"))))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "String"))) (sort (identifier "Seq") (sort (identifier "String")))) :arguments (list (variable (identifier "rb") :sort (sort (identifier "Seq") (sort (identifier "String")))) (application (identifier "seq.empty") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Seq") (sort (identifier "String"))))) :return-sort (sort (identifier "Bool"))) (application (identifier "=") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "Int"))) (sort (identifier "Seq") (sort (identifier "Int")))) :arguments (list (variable (identifier "rq") :sort (sort (identifier "Seq") (sort (identifier "Int")))) (application (identifier "seq.rev") :argument-sorts (list (sort (identifier "Seq") (sort (identifier "Int")))) :arguments (list (variable (identifier "rq") :sort (sort (identifier "Seq") (sort (identifier "Int"))))) :return-sort (sort (identifier "Seq") (sort (identifier "Int"))))) :return-sort (sort (identifier "Bool")))) :return-sort (sort (identifier "Bool")))) :constructor (constructor (identifier "$main") :arguments (list) :argument-sorts (list) :return-sort (sort (identifier "Start")))) 
(synth-fun (identifier "MyFunc") :term-type (sort (identifier "Start")) :grammar (grammar :non-terminals (list (identifier "@Start__agtt")) :non-terminal-types (list (sort (identifier "Start"))) :productions (list (production :instance (identifier "@Start__agtt") :occurrences (list) :operator (identifier "$main"))))) 
(constraint (term (exists :bindings (list (identifier "rq") (identifier "y")) :binding-sorts (list (sort (identifier "Seq") (sort (identifier "Int"))) (sort (identifier "BitVec" 32))) :child (application (identifier "Start.Sem") :argument-sorts (list (sort (identifier "Start")) (sort (identifier "Seq") (sort (identifier "Int"))) (sort (identifier "BitVec" 32))) :arguments (list (application (identifier "MyFunc") :argument-sorts (list) :arguments (list) :return-sort (sort (identifier "Start"))) (variable (identifier "rq") :sort (sort (identifier "Seq") (sort (identifier "Int")))) (variable (identifier "y") :sort (sort (identifier "BitVec" 32)))) :return-sort (sort (identifier "Bool")))))) 
(check-synth)